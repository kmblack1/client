/* soapH.h
   Generated by gSOAP 2.8.71 for xml-rpc.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
/* _boolean is a typedef synonym of byte */

#ifndef SOAP_TYPE__boolean_DEFINED
#define SOAP_TYPE__boolean_DEFINED

#define soap_default__boolean soap_default_byte


#define soap__boolean2s soap_byte2s


#define soap_out__boolean soap_out_byte


#define soap_s2_boolean soap_s2byte


#define soap_in__boolean soap_in_byte

#define soap_new__boolean soap_new_byte

SOAP_FMAC3 int SOAP_FMAC4 soap_put__boolean(struct soap*, const char *, const char*, const char*);

#ifndef soap_write__boolean
#define soap_write__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__boolean(soap, data, "boolean", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__boolean
#define soap_PUT__boolean(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__boolean(soap, data, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__boolean
#define soap_PATCH__boolean(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__boolean(soap, data, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__boolean
#define soap_POST_send__boolean(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__boolean(soap, data, "boolean", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif


#define soap_get__boolean soap_get_byte


#define soap_read__boolean soap_read_byte


#define soap_GET__boolean soap_GET_byte


#define soap_POST_recv__boolean soap_POST_recv_byte

#endif

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

#ifdef SOAP_DEFAULT_byte
#define soap_default_byte(soap, a) (*(a) = SOAP_DEFAULT_byte)
#else
#define soap_default_byte(soap, a) (*(a) = (char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_byte
#define soap_PUT_byte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_byte
#define soap_PATCH_byte(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_byte
#define soap_POST_send_byte(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_byte
#define soap_GET_byte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_byte(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_byte
#define soap_POST_recv_byte(soap, data) ( soap_read_byte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif
/* _i4 is a typedef synonym of int */

#ifndef SOAP_TYPE__i4_DEFINED
#define SOAP_TYPE__i4_DEFINED

#define soap_default__i4 soap_default_int


#define soap__i42s soap_int2s


#define soap_out__i4 soap_out_int


#define soap_s2_i4 soap_s2int


#define soap_in__i4 soap_in_int

#define soap_new__i4 soap_new_int

SOAP_FMAC3 int SOAP_FMAC4 soap_put__i4(struct soap*, const int *, const char*, const char*);

#ifndef soap_write__i4
#define soap_write__i4(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__i4(soap, data, "i4", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__i4
#define soap_PUT__i4(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__i4(soap, data, "i4", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__i4
#define soap_PATCH__i4(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__i4(soap, data, "i4", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__i4
#define soap_POST_send__i4(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__i4(soap, data, "i4", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif


#define soap_get__i4 soap_get_int


#define soap_read__i4 soap_read_int


#define soap_GET__i4 soap_GET_int


#define soap_POST_recv__i4 soap_POST_recv_int

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

#ifdef SOAP_DEFAULT_int
#define soap_default_int(soap, a) (*(a) = SOAP_DEFAULT_int)
#else
#define soap_default_int(soap, a) (*(a) = (int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_int
#define soap_PUT_int(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_int
#define soap_PATCH_int(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_int
#define soap_POST_send_int(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_int
#define soap_GET_int(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_int(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_int
#define soap_POST_recv_int(soap, data) ( soap_read_int(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif
/* _int is a typedef synonym of LONG64 */

#ifndef SOAP_TYPE__int_DEFINED
#define SOAP_TYPE__int_DEFINED

#define soap_default__int soap_default_LONG64


#define soap__int2s soap_LONG642s


#define soap_out__int soap_out_LONG64


#define soap_s2_int soap_s2LONG64


#define soap_in__int soap_in_LONG64

#define soap_new__int soap_new_LONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put__int(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write__int
#define soap_write__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__int
#define soap_PUT__int(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__int
#define soap_PATCH__int(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__int
#define soap_POST_send__int(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__int(soap, data, "int", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif


#define soap_get__int soap_get_LONG64


#define soap_read__int soap_read_LONG64


#define soap_GET__int soap_GET_LONG64


#define soap_POST_recv__int soap_POST_recv_LONG64

#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

#ifdef SOAP_DEFAULT_LONG64
#define soap_default_LONG64(soap, a) (*(a) = SOAP_DEFAULT_LONG64)
#else
#define soap_default_LONG64(soap, a) (*(a) = (LONG64)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_LONG64(soap, data, "long", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_LONG64
#define soap_PUT_LONG64(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_LONG64(soap, data, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_LONG64
#define soap_PATCH_LONG64(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_LONG64(soap, data, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_LONG64
#define soap_POST_send_LONG64(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_LONG64(soap, data, "long", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_LONG64
#define soap_GET_LONG64(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_LONG64(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_LONG64
#define soap_POST_recv_LONG64(soap, data) ( soap_read_LONG64(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif
/* _double is a typedef synonym of double */

#ifndef SOAP_TYPE__double_DEFINED
#define SOAP_TYPE__double_DEFINED

#define soap_default__double soap_default_double


#define soap__double2s soap_double2s


#define soap_out__double soap_out_double


#define soap_s2_double soap_s2double


#define soap_in__double soap_in_double

#define soap_new__double soap_new_double

SOAP_FMAC3 int SOAP_FMAC4 soap_put__double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write__double
#define soap_write__double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__double(soap, data, "double", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__double
#define soap_PUT__double(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__double(soap, data, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__double
#define soap_PATCH__double(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__double(soap, data, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__double
#define soap_POST_send__double(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__double(soap, data, "double", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif


#define soap_get__double soap_get_double


#define soap_read__double soap_read_double


#define soap_GET__double soap_GET_double


#define soap_POST_recv__double soap_POST_recv_double

#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

#ifdef SOAP_DEFAULT_double
#define soap_default_double(soap, a) (*(a) = SOAP_DEFAULT_double)
#else
#define soap_default_double(soap, a) (*(a) = (double)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_double(soap, data, "double", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_double
#define soap_PUT_double(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, data, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_double
#define soap_PATCH_double(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, data, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_double
#define soap_POST_send_double(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, data, "double", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_double
#define soap_GET_double(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_double(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_double
#define soap_POST_recv_double(soap, data) ( soap_read_double(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

#ifdef SOAP_DEFAULT_unsignedByte
#define soap_default_unsignedByte(soap, a) (*(a) = SOAP_DEFAULT_unsignedByte)
#else
#define soap_default_unsignedByte(soap, a) (*(a) = (unsigned char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_unsignedByte(soap, data, "unsignedByte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_unsignedByte
#define soap_PUT_unsignedByte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, data, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_unsignedByte
#define soap_PATCH_unsignedByte(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, data, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_unsignedByte
#define soap_POST_send_unsignedByte(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, data, "unsignedByte", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_unsignedByte
#define soap_GET_unsignedByte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_unsignedByte(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_unsignedByte
#define soap_POST_recv_unsignedByte(soap, data) ( soap_read_unsignedByte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

#ifdef SOAP_DEFAULT_unsignedInt
#define soap_default_unsignedInt(soap, a) (*(a) = SOAP_DEFAULT_unsignedInt)
#else
#define soap_default_unsignedInt(soap, a) (*(a) = (unsigned int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_unsignedInt
#define soap_PUT_unsignedInt(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_unsignedInt
#define soap_PATCH_unsignedInt(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_unsignedInt
#define soap_POST_send_unsignedInt(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, data, "unsignedInt", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_unsignedInt
#define soap_GET_unsignedInt(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_unsignedInt(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_unsignedInt
#define soap_POST_recv_unsignedInt(soap, data) ( soap_read_unsignedInt(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

#ifdef SOAP_DEFAULT_ULONG64
#define soap_default_ULONG64(soap, a) (*(a) = SOAP_DEFAULT_ULONG64)
#else
#define soap_default_ULONG64(soap, a) (*(a) = (ULONG64)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_ULONG64
#define soap_write_ULONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_ULONG64(soap, data, "unsignedLong", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ULONG64
#define soap_PUT_ULONG64(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ULONG64(soap, data, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_ULONG64
#define soap_PATCH_ULONG64(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ULONG64(soap, data, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_ULONG64
#define soap_POST_send_ULONG64(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ULONG64(soap, data, "unsignedLong", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_ULONG64
#define soap_read_ULONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_ULONG64(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ULONG64
#define soap_GET_ULONG64(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ULONG64(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_ULONG64
#define soap_POST_recv_ULONG64(soap, data) ( soap_read_ULONG64(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_new_SOAP_ENV__Fault(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Fault
#define soap_PUT_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Fault
#define soap_PATCH_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Fault
#define soap_POST_send_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Fault
#define soap_GET_SOAP_ENV__Fault(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Fault
#define soap_POST_recv_SOAP_ENV__Fault(soap, data) ( soap_read_SOAP_ENV__Fault(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_new_SOAP_ENV__Reason(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Reason
#define soap_PUT_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Reason
#define soap_PATCH_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Reason
#define soap_POST_send_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Reason
#define soap_GET_SOAP_ENV__Reason(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Reason
#define soap_POST_recv_SOAP_ENV__Reason(soap, data) ( soap_read_SOAP_ENV__Reason(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_new_SOAP_ENV__Detail(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Detail
#define soap_PUT_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Detail
#define soap_PATCH_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Detail
#define soap_POST_send_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Detail
#define soap_GET_SOAP_ENV__Detail(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Detail
#define soap_POST_recv_SOAP_ENV__Detail(soap, data) ( soap_read_SOAP_ENV__Detail(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_new_SOAP_ENV__Code(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Code
#define soap_PUT_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Code
#define soap_PATCH_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Code
#define soap_POST_send_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Code
#define soap_GET_SOAP_ENV__Code(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Code
#define soap_POST_recv_SOAP_ENV__Code(soap, data) ( soap_read_SOAP_ENV__Code(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_new_SOAP_ENV__Header(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Header
#define soap_PUT_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_SOAP_ENV__Header
#define soap_PATCH_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_SOAP_ENV__Header
#define soap_POST_send_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Header
#define soap_GET_SOAP_ENV__Header(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Header
#define soap_POST_recv_SOAP_ENV__Header(soap, data) ( soap_read_SOAP_ENV__Header(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef SOAP_TYPE_methodCall_DEFINED
#define SOAP_TYPE_methodCall_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_methodCall(struct soap*, struct methodCall *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_methodCall(struct soap*, const struct methodCall *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_methodCall(struct soap*, const char*, int, const struct methodCall *, const char*);
SOAP_FMAC3 struct methodCall * SOAP_FMAC4 soap_in_methodCall(struct soap*, const char*, struct methodCall *, const char*);

SOAP_FMAC3 struct methodCall * SOAP_FMAC4 soap_new_methodCall(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_methodCall(struct soap*, const struct methodCall *, const char*, const char*);

#ifndef soap_write_methodCall
#define soap_write_methodCall(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_methodCall(soap, data), 0) || soap_put_methodCall(soap, data, "methodCall", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_methodCall
#define soap_PUT_methodCall(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_methodCall(soap, data), 0) || soap_put_methodCall(soap, data, "methodCall", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_methodCall
#define soap_PATCH_methodCall(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_methodCall(soap, data), 0) || soap_put_methodCall(soap, data, "methodCall", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_methodCall
#define soap_POST_send_methodCall(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_methodCall(soap, data), 0) || soap_put_methodCall(soap, data, "methodCall", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct methodCall * SOAP_FMAC4 soap_get_methodCall(struct soap*, struct methodCall *, const char*, const char*);

#ifndef soap_read_methodCall
#define soap_read_methodCall(soap, data) ( ((data) ? (soap_default_methodCall(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_methodCall(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_methodCall
#define soap_GET_methodCall(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_methodCall(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_methodCall
#define soap_POST_recv_methodCall(soap, data) ( soap_read_methodCall(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_fault_DEFINED
#define SOAP_TYPE_fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fault(struct soap*, struct fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fault(struct soap*, const struct fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fault(struct soap*, const char*, int, const struct fault *, const char*);
SOAP_FMAC3 struct fault * SOAP_FMAC4 soap_in_fault(struct soap*, const char*, struct fault *, const char*);

SOAP_FMAC3 struct fault * SOAP_FMAC4 soap_new_fault(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_fault(struct soap*, const struct fault *, const char*, const char*);

#ifndef soap_write_fault
#define soap_write_fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fault(soap, data), 0) || soap_put_fault(soap, data, "fault", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_fault
#define soap_PUT_fault(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_fault(soap, data), 0) || soap_put_fault(soap, data, "fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_fault
#define soap_PATCH_fault(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_fault(soap, data), 0) || soap_put_fault(soap, data, "fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_fault
#define soap_POST_send_fault(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_fault(soap, data), 0) || soap_put_fault(soap, data, "fault", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct fault * SOAP_FMAC4 soap_get_fault(struct soap*, struct fault *, const char*, const char*);

#ifndef soap_read_fault
#define soap_read_fault(soap, data) ( ((data) ? (soap_default_fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_fault
#define soap_GET_fault(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_fault(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_fault
#define soap_POST_recv_fault(soap, data) ( soap_read_fault(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_methodResponse_DEFINED
#define SOAP_TYPE_methodResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_methodResponse(struct soap*, struct methodResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_methodResponse(struct soap*, const struct methodResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_methodResponse(struct soap*, const char*, int, const struct methodResponse *, const char*);
SOAP_FMAC3 struct methodResponse * SOAP_FMAC4 soap_in_methodResponse(struct soap*, const char*, struct methodResponse *, const char*);

SOAP_FMAC3 struct methodResponse * SOAP_FMAC4 soap_new_methodResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_methodResponse(struct soap*, const struct methodResponse *, const char*, const char*);

#ifndef soap_write_methodResponse
#define soap_write_methodResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_methodResponse(soap, data), 0) || soap_put_methodResponse(soap, data, "methodResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_methodResponse
#define soap_PUT_methodResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_methodResponse(soap, data), 0) || soap_put_methodResponse(soap, data, "methodResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_methodResponse
#define soap_PATCH_methodResponse(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_methodResponse(soap, data), 0) || soap_put_methodResponse(soap, data, "methodResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_methodResponse
#define soap_POST_send_methodResponse(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_methodResponse(soap, data), 0) || soap_put_methodResponse(soap, data, "methodResponse", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct methodResponse * SOAP_FMAC4 soap_get_methodResponse(struct soap*, struct methodResponse *, const char*, const char*);

#ifndef soap_read_methodResponse
#define soap_read_methodResponse(soap, data) ( ((data) ? (soap_default_methodResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_methodResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_methodResponse
#define soap_GET_methodResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_methodResponse(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_methodResponse
#define soap_POST_recv_methodResponse(soap, data) ( soap_read_methodResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_param_DEFINED
#define SOAP_TYPE_param_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_param(struct soap*, struct param *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_param(struct soap*, const struct param *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_param(struct soap*, const char*, int, const struct param *, const char*);
SOAP_FMAC3 struct param * SOAP_FMAC4 soap_in_param(struct soap*, const char*, struct param *, const char*);

SOAP_FMAC3 struct param * SOAP_FMAC4 soap_new_param(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_param(struct soap*, const struct param *, const char*, const char*);

#ifndef soap_write_param
#define soap_write_param(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_param(soap, data), 0) || soap_put_param(soap, data, "param", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_param
#define soap_PUT_param(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_param(soap, data), 0) || soap_put_param(soap, data, "param", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_param
#define soap_PATCH_param(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_param(soap, data), 0) || soap_put_param(soap, data, "param", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_param
#define soap_POST_send_param(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_param(soap, data), 0) || soap_put_param(soap, data, "param", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct param * SOAP_FMAC4 soap_get_param(struct soap*, struct param *, const char*, const char*);

#ifndef soap_read_param
#define soap_read_param(soap, data) ( ((data) ? (soap_default_param(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_param(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_param
#define soap_GET_param(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_param(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_param
#define soap_POST_recv_param(soap, data) ( soap_read_param(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_params_DEFINED
#define SOAP_TYPE_params_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_params(struct soap*, struct params *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_params(struct soap*, const struct params *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_params(struct soap*, const char*, int, const struct params *, const char*);
SOAP_FMAC3 struct params * SOAP_FMAC4 soap_in_params(struct soap*, const char*, struct params *, const char*);

SOAP_FMAC3 struct params * SOAP_FMAC4 soap_new_params(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_params(struct soap*, const struct params *, const char*, const char*);

#ifndef soap_write_params
#define soap_write_params(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_params(soap, data), 0) || soap_put_params(soap, data, "params", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_params
#define soap_PUT_params(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_params(soap, data), 0) || soap_put_params(soap, data, "params", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_params
#define soap_PATCH_params(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_params(soap, data), 0) || soap_put_params(soap, data, "params", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_params
#define soap_POST_send_params(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_params(soap, data), 0) || soap_put_params(soap, data, "params", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct params * SOAP_FMAC4 soap_get_params(struct soap*, struct params *, const char*, const char*);

#ifndef soap_read_params
#define soap_read_params(soap, data) ( ((data) ? (soap_default_params(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_params(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_params
#define soap_GET_params(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_params(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_params
#define soap_POST_recv_params(soap, data) ( soap_read_params(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__array_DEFINED
#define SOAP_TYPE__array_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__array(struct soap*, struct _array *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__array(struct soap*, const struct _array *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__array(struct soap*, const char*, int, const struct _array *, const char*);
SOAP_FMAC3 struct _array * SOAP_FMAC4 soap_in__array(struct soap*, const char*, struct _array *, const char*);

SOAP_FMAC3 struct _array * SOAP_FMAC4 soap_new__array(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__array(struct soap*, const struct _array *, const char*, const char*);

#ifndef soap_write__array
#define soap_write__array(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__array(soap, data), 0) || soap_put__array(soap, data, "array", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__array
#define soap_PUT__array(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__array(soap, data), 0) || soap_put__array(soap, data, "array", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__array
#define soap_PATCH__array(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__array(soap, data), 0) || soap_put__array(soap, data, "array", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__array
#define soap_POST_send__array(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__array(soap, data), 0) || soap_put__array(soap, data, "array", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _array * SOAP_FMAC4 soap_get__array(struct soap*, struct _array *, const char*, const char*);

#ifndef soap_read__array
#define soap_read__array(soap, data) ( ((data) ? (soap_default__array(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__array(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__array
#define soap_GET__array(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__array(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__array
#define soap_POST_recv__array(soap, data) ( soap_read__array(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_data_DEFINED
#define SOAP_TYPE_data_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_data(struct soap*, struct data *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_data(struct soap*, const struct data *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_data(struct soap*, const char*, int, const struct data *, const char*);
SOAP_FMAC3 struct data * SOAP_FMAC4 soap_in_data(struct soap*, const char*, struct data *, const char*);

SOAP_FMAC3 struct data * SOAP_FMAC4 soap_new_data(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_data(struct soap*, const struct data *, const char*, const char*);

#ifndef soap_write_data
#define soap_write_data(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_data(soap, data), 0) || soap_put_data(soap, data, "data", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_data
#define soap_PUT_data(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_data(soap, data), 0) || soap_put_data(soap, data, "data", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_data
#define soap_PATCH_data(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_data(soap, data), 0) || soap_put_data(soap, data, "data", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_data
#define soap_POST_send_data(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_data(soap, data), 0) || soap_put_data(soap, data, "data", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct data * SOAP_FMAC4 soap_get_data(struct soap*, struct data *, const char*, const char*);

#ifndef soap_read_data
#define soap_read_data(soap, data) ( ((data) ? (soap_default_data(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_data(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_data
#define soap_GET_data(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_data(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_data
#define soap_POST_recv_data(soap, data) ( soap_read_data(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_member_DEFINED
#define SOAP_TYPE_member_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_member(struct soap*, struct member *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_member(struct soap*, const struct member *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_member(struct soap*, const char*, int, const struct member *, const char*);
SOAP_FMAC3 struct member * SOAP_FMAC4 soap_in_member(struct soap*, const char*, struct member *, const char*);

SOAP_FMAC3 struct member * SOAP_FMAC4 soap_new_member(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_member(struct soap*, const struct member *, const char*, const char*);

#ifndef soap_write_member
#define soap_write_member(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_member(soap, data), 0) || soap_put_member(soap, data, "member", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_member
#define soap_PUT_member(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_member(soap, data), 0) || soap_put_member(soap, data, "member", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_member
#define soap_PATCH_member(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_member(soap, data), 0) || soap_put_member(soap, data, "member", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_member
#define soap_POST_send_member(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_member(soap, data), 0) || soap_put_member(soap, data, "member", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct member * SOAP_FMAC4 soap_get_member(struct soap*, struct member *, const char*, const char*);

#ifndef soap_read_member
#define soap_read_member(soap, data) ( ((data) ? (soap_default_member(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_member(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_member
#define soap_GET_member(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_member(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_member
#define soap_POST_recv_member(soap, data) ( soap_read_member(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__struct_DEFINED
#define SOAP_TYPE__struct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__struct(struct soap*, struct _struct *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__struct(struct soap*, const struct _struct *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__struct(struct soap*, const char*, int, const struct _struct *, const char*);
SOAP_FMAC3 struct _struct * SOAP_FMAC4 soap_in__struct(struct soap*, const char*, struct _struct *, const char*);

SOAP_FMAC3 struct _struct * SOAP_FMAC4 soap_new__struct(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__struct(struct soap*, const struct _struct *, const char*, const char*);

#ifndef soap_write__struct
#define soap_write__struct(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__struct(soap, data), 0) || soap_put__struct(soap, data, "struct", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__struct
#define soap_PUT__struct(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__struct(soap, data), 0) || soap_put__struct(soap, data, "struct", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__struct
#define soap_PATCH__struct(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__struct(soap, data), 0) || soap_put__struct(soap, data, "struct", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__struct
#define soap_POST_send__struct(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__struct(soap, data), 0) || soap_put__struct(soap, data, "struct", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _struct * SOAP_FMAC4 soap_get__struct(struct soap*, struct _struct *, const char*, const char*);

#ifndef soap_read__struct
#define soap_read__struct(soap, data) ( ((data) ? (soap_default__struct(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__struct(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__struct
#define soap_GET__struct(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__struct(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__struct
#define soap_POST_recv__struct(soap, data) ( soap_read__struct(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__base64_DEFINED
#define SOAP_TYPE__base64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__base64(struct soap*, struct _base64 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__base64(struct soap*, const struct _base64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__base64(struct soap*, const char*, int, const struct _base64 *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__base642s(struct soap*, struct _base64);
SOAP_FMAC3 struct _base64 * SOAP_FMAC4 soap_in__base64(struct soap*, const char*, struct _base64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_base64(struct soap*, const char*, struct _base64 *);

SOAP_FMAC3 struct _base64 * SOAP_FMAC4 soap_new__base64(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__base64(struct soap*, const struct _base64 *, const char*, const char*);

#ifndef soap_write__base64
#define soap_write__base64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__base64(soap, data), 0) || soap_put__base64(soap, data, "base64", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__base64
#define soap_PUT__base64(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__base64(soap, data), 0) || soap_put__base64(soap, data, "base64", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__base64
#define soap_PATCH__base64(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__base64(soap, data), 0) || soap_put__base64(soap, data, "base64", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__base64
#define soap_POST_send__base64(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize__base64(soap, data), 0) || soap_put__base64(soap, data, "base64", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct _base64 * SOAP_FMAC4 soap_get__base64(struct soap*, struct _base64 *, const char*, const char*);

#ifndef soap_read__base64
#define soap_read__base64(soap, data) ( ((data) ? (soap_default__base64(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get__base64(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__base64
#define soap_GET__base64(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__base64(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__base64
#define soap_POST_recv__base64(soap, data) ( soap_read__base64(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_value_DEFINED
#define SOAP_TYPE_value_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_value(struct soap*, struct value *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_value(struct soap*, const struct value *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_value(struct soap*, const char*, int, const struct value *, const char*);
SOAP_FMAC3 struct value * SOAP_FMAC4 soap_in_value(struct soap*, const char*, struct value *, const char*);

SOAP_FMAC3 struct value * SOAP_FMAC4 soap_new_value(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_value(struct soap*, const struct value *, const char*, const char*);

#ifndef soap_write_value
#define soap_write_value(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_value(soap, data), 0) || soap_put_value(soap, data, "value", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_value
#define soap_PUT_value(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_value(soap, data), 0) || soap_put_value(soap, data, "value", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_value
#define soap_PATCH_value(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_value(soap, data), 0) || soap_put_value(soap, data, "value", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_value
#define soap_POST_send_value(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_value(soap, data), 0) || soap_put_value(soap, data, "value", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 struct value * SOAP_FMAC4 soap_get_value(struct soap*, struct value *, const char*, const char*);

#ifndef soap_read_value
#define soap_read_value(soap, data) ( ((data) ? (soap_default_value(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_value(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_value
#define soap_GET_value(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_value(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_value
#define soap_POST_recv_value(soap, data) ( soap_read_value(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_base64_DEFINED
#define SOAP_TYPE_PointerTo_base64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_base64(struct soap*, struct _base64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_base64(struct soap*, const char *, int, struct _base64 *const*, const char *);
SOAP_FMAC3 struct _base64 ** SOAP_FMAC4 soap_in_PointerTo_base64(struct soap*, const char*, struct _base64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_base64(struct soap*, struct _base64 *const*, const char*, const char*);
SOAP_FMAC3 struct _base64 ** SOAP_FMAC4 soap_get_PointerTo_base64(struct soap*, struct _base64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_double_DEFINED
#define SOAP_TYPE_PointerTo_double_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_double(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_double(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTo_double(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_double(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTo_double(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_int_DEFINED
#define SOAP_TYPE_PointerTo_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_int(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_int(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerTo_int(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_int(struct soap*, LONG64 *const*, const char*, const char*);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerTo_int(struct soap*, LONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_boolean_DEFINED
#define SOAP_TYPE_PointerTo_boolean_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_boolean(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_boolean(struct soap*, const char *, int, char *const*, const char *);
SOAP_FMAC3 char ** SOAP_FMAC4 soap_in_PointerTo_boolean(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_boolean(struct soap*, char *const*, const char*, const char*);
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_PointerTo_boolean(struct soap*, char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTomethodResponse_DEFINED
#define SOAP_TYPE_PointerTomethodResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomethodResponse(struct soap*, struct methodResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomethodResponse(struct soap*, const char *, int, struct methodResponse *const*, const char *);
SOAP_FMAC3 struct methodResponse ** SOAP_FMAC4 soap_in_PointerTomethodResponse(struct soap*, const char*, struct methodResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomethodResponse(struct soap*, struct methodResponse *const*, const char*, const char*);
SOAP_FMAC3 struct methodResponse ** SOAP_FMAC4 soap_get_PointerTomethodResponse(struct soap*, struct methodResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofault_DEFINED
#define SOAP_TYPE_PointerTofault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofault(struct soap*, struct fault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofault(struct soap*, const char *, int, struct fault *const*, const char *);
SOAP_FMAC3 struct fault ** SOAP_FMAC4 soap_in_PointerTofault(struct soap*, const char*, struct fault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofault(struct soap*, struct fault *const*, const char*, const char*);
SOAP_FMAC3 struct fault ** SOAP_FMAC4 soap_get_PointerTofault(struct soap*, struct fault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToparams_DEFINED
#define SOAP_TYPE_PointerToparams_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToparams(struct soap*, struct params *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToparams(struct soap*, const char *, int, struct params *const*, const char *);
SOAP_FMAC3 struct params ** SOAP_FMAC4 soap_in_PointerToparams(struct soap*, const char*, struct params **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToparams(struct soap*, struct params *const*, const char*, const char*);
SOAP_FMAC3 struct params ** SOAP_FMAC4 soap_get_PointerToparams(struct soap*, struct params **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToparam_DEFINED
#define SOAP_TYPE_PointerToparam_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToparam(struct soap*, struct param *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToparam(struct soap*, const char *, int, struct param *const*, const char *);
SOAP_FMAC3 struct param ** SOAP_FMAC4 soap_in_PointerToparam(struct soap*, const char*, struct param **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToparam(struct soap*, struct param *const*, const char*, const char*);
SOAP_FMAC3 struct param ** SOAP_FMAC4 soap_get_PointerToparam(struct soap*, struct param **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wstring_DEFINED
#define SOAP_TYPE_wstring_DEFINED

#ifdef SOAP_DEFAULT_wstring
#define soap_default_wstring(soap, a) (*(a) = SOAP_DEFAULT_wstring)
#else
#define soap_default_wstring(soap, a) (*(a) = (wchar_t *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap*, wchar_t *const*);

#define soap_wstring2s(soap, a) soap_wchar2s((soap), (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap*, const char*, int, wchar_t*const*, const char*);

#define soap_s2wstring(soap, s, a) soap_s2wchar((soap), (s), (wchar_t**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap*, const char*, wchar_t **, const char*);

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_new_wstring(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap*, wchar_t *const*, const char*, const char*);

#ifndef soap_write_wstring
#define soap_write_wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_wstring(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_wstring
#define soap_PUT_wstring(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_wstring(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_wstring
#define soap_PATCH_wstring(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_wstring(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_wstring
#define soap_POST_send_wstring(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_wstring(soap, data, "string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap*, wchar_t **, const char*, const char*);

#ifndef soap_read_wstring
#define soap_read_wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_wstring(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_wstring
#define soap_GET_wstring(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_wstring(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_wstring
#define soap_POST_recv_wstring(soap, data) ( soap_read_wstring(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_PointerTomember_DEFINED
#define SOAP_TYPE_PointerTomember_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomember(struct soap*, struct member *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomember(struct soap*, const char *, int, struct member *const*, const char *);
SOAP_FMAC3 struct member ** SOAP_FMAC4 soap_in_PointerTomember(struct soap*, const char*, struct member **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomember(struct soap*, struct member *const*, const char*, const char*);
SOAP_FMAC3 struct member ** SOAP_FMAC4 soap_get_PointerTomember(struct soap*, struct member **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif
/* _dateTime_DOTiso8601 is a typedef synonym of string */

#ifndef SOAP_TYPE__dateTime_DOTiso8601_DEFINED
#define SOAP_TYPE__dateTime_DOTiso8601_DEFINED

#define soap_default__dateTime_DOTiso8601 soap_default_string


#define soap_serialize__dateTime_DOTiso8601 soap_serialize_string


#define soap__dateTime_DOTiso86012s(soap, a) (a)

#define soap_out__dateTime_DOTiso8601 soap_out_string


#define soap_s2_dateTime_DOTiso8601(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__dateTime_DOTiso8601 soap_in_string

#define soap_new__dateTime_DOTiso8601 soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__dateTime_DOTiso8601(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__dateTime_DOTiso8601
#define soap_write__dateTime_DOTiso8601(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__dateTime_DOTiso8601(soap, data, "dateTime.iso8601", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__dateTime_DOTiso8601
#define soap_PUT__dateTime_DOTiso8601(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__dateTime_DOTiso8601(soap, data, "dateTime.iso8601", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__dateTime_DOTiso8601
#define soap_PATCH__dateTime_DOTiso8601(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__dateTime_DOTiso8601(soap, data, "dateTime.iso8601", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__dateTime_DOTiso8601
#define soap_POST_send__dateTime_DOTiso8601(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__dateTime_DOTiso8601(soap, data, "dateTime.iso8601", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif


#define soap_get__dateTime_DOTiso8601 soap_get_string


#define soap_read__dateTime_DOTiso8601 soap_read_string


#define soap_GET__dateTime_DOTiso8601 soap_GET_string


#define soap_POST_recv__dateTime_DOTiso8601 soap_POST_recv_string

#endif
/* _string is a typedef synonym of string */

#ifndef SOAP_TYPE__string_DEFINED
#define SOAP_TYPE__string_DEFINED

#define soap_default__string soap_default_string


#define soap_serialize__string soap_serialize_string


#define soap__string2s(soap, a) (a)

#define soap_out__string soap_out_string


#define soap_s2_string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__string soap_in_string

#define soap_new__string soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__string
#define soap_write__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__string
#define soap_PUT__string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__string
#define soap_PATCH__string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__string
#define soap_POST_send__string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__string(soap, data, "string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif


#define soap_get__string soap_get_string


#define soap_read__string soap_read_string


#define soap_GET__string soap_GET_string


#define soap_POST_recv__string soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTovalue_DEFINED
#define SOAP_TYPE_PointerTovalue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTovalue(struct soap*, struct value *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTovalue(struct soap*, const char *, int, struct value *const*, const char *);
SOAP_FMAC3 struct value ** SOAP_FMAC4 soap_in_PointerTovalue(struct soap*, const char*, struct value **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTovalue(struct soap*, struct value *const*, const char*, const char*);
SOAP_FMAC3 struct value ** SOAP_FMAC4 soap_get_PointerTovalue(struct soap*, struct value **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

#ifdef SOAP_DEFAULT__QName
#define soap_default__QName(soap, a) (*(a) = SOAP_DEFAULT__QName)
#else
#define soap_default__QName(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__QName
#define soap_PUT__QName(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH__QName
#define soap_PATCH__QName(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send__QName
#define soap_POST_send__QName(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__QName
#define soap_GET__QName(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__QName(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv__QName
#define soap_POST_recv__QName(soap, data) ( soap_read__QName(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

#ifdef SOAP_DEFAULT_string
#define soap_default_string(soap, a) (*(a) = SOAP_DEFAULT_string)
#else
#define soap_default_string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_string
#define soap_PUT_string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_PATCH_string
#define soap_PATCH_string(soap, URL, data) ( soap_free_temp(soap), soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), soap_closesock(soap) )
#endif


#ifndef soap_POST_send_string
#define soap_POST_send_string(soap, URL, data) ( soap_free_temp(soap), ( soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) ) && soap_closesock(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_string
#define soap_GET_string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_string(soap, (data)), soap_closesock(soap) )
#endif


#ifndef soap_POST_recv_string
#define soap_POST_recv_string(soap, data) ( soap_read_string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifdef __cplusplus
}
#endif

#endif

/* End of soapH.h */
