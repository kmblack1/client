/* soapStub.h
   Generated by gSOAP 2.8.71 for xml-rpc.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "xml-rpc-iters.h"      /* deferred for inclusion by C++ compiler */

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20871
# error "GSOAP VERSION 20871 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Structs and Unions                                                         *
 *                                                                            *
\******************************************************************************/

struct _base64;	/* xml-rpc.h:105 */
struct _struct;	/* xml-rpc.h:124 */
struct data;	/* xml-rpc.h:152 */
struct _array;	/* xml-rpc.h:161 */
struct value;	/* xml-rpc.h:41 */
struct member;	/* xml-rpc.h:146 */
struct params;	/* xml-rpc.h:299 */
struct param;	/* xml-rpc.h:317 */
struct methodResponse;	/* xml-rpc.h:331 */
struct methodCall;	/* xml-rpc.h:353 */
struct fault;	/* xml-rpc.h:347 */

/* xml-rpc.h:105 */
#ifndef SOAP_TYPE__base64
#define SOAP_TYPE__base64 (28)
/* base64Binary XML schema type: */
struct _base64 {
        unsigned char *__ptr;
        int __size;
};
#endif

/* xml-rpc.h:124 */
#ifndef SOAP_TYPE__struct
#define SOAP_TYPE__struct (47)
/* complex XML schema type 'struct': */
struct _struct {
        /** Sequence of elements 'member' of XML schema type 'member' stored in dynamic array member of length __size */
        int __size;
        struct member *member;
        /** Context that manages this object */
        struct soap *soap;
};
#endif

/* xml-rpc.h:152 */
#ifndef SOAP_TYPE_data
#define SOAP_TYPE_data (69)
/* complex XML schema type 'data': */
struct data {
        /** Sequence of elements 'value' of XML schema type 'value' stored in dynamic array value of length __size */
        int __size;
        struct value *value;
};
#endif

/* xml-rpc.h:161 */
#ifndef SOAP_TYPE__array
#define SOAP_TYPE__array (70)
/* complex XML schema type 'array': */
struct _array {
        /** Required element 'data' of XML schema type 'data' */
        struct data data;
        /** Context that manages this object */
        struct soap *soap;
};
#endif

/* xml-rpc.h:41 */
#ifndef SOAP_TYPE_value
#define SOAP_TYPE_value (7)
/* complex XML schema type 'value': */
struct value {
        /** Any type of element 'ref' assigned to ref with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *ref;
        char *__any;
        /** Context that manages this object */
        struct soap *soap;
};
#endif

/* xml-rpc.h:146 */
#ifndef SOAP_TYPE_member
#define SOAP_TYPE_member (67)
/* complex XML schema type 'member': */
struct member {
        /** Optional element 'name' of XML schema type 'xsd:string' */
        char *name;
        /** Required element 'value' of XML schema type 'value' */
        struct value value;
};
#endif

/* xml-rpc.h:299 */
#ifndef SOAP_TYPE_params
#define SOAP_TYPE_params (175)
/* complex XML schema type 'params': */
struct params {
        /** Sequence of elements 'param' of XML schema type 'param' stored in dynamic array param of length __size */
        int __size;
        struct param *param;
        /** Context that manages this object */
        struct soap *soap;
};
#endif

/* xml-rpc.h:317 */
#ifndef SOAP_TYPE_param
#define SOAP_TYPE_param (185)
/* complex XML schema type 'param': */
struct param {
        /** Required element 'value' of XML schema type 'value' */
        struct value value;
};
#endif

/* xml-rpc.h:331 */
#ifndef SOAP_TYPE_methodResponse
#define SOAP_TYPE_methodResponse (187)
/* complex XML schema type 'methodResponse': */
struct methodResponse {
        /** Optional element 'params' of XML schema type 'params' */
        struct params *params;
        /** Optional element 'fault' of XML schema type 'fault' */
        struct fault *fault;
        /** Context that manages this object */
        struct soap *soap;
};
#endif

/* xml-rpc.h:353 */
#ifndef SOAP_TYPE_methodCall
#define SOAP_TYPE_methodCall (200)
/* complex XML schema type 'methodCall': */
struct methodCall {
        /** Not serialized */
        char *methodEndpoint;
        /** Not serialized */
        struct methodResponse *methodResponse;
        /** Optional element 'methodName' of XML schema type 'xsd:string' */
        char *methodName;
        /** Required element 'params' of XML schema type 'params' */
        struct params params;
        /** Context that manages this object */
        struct soap *soap;
};
#endif

/* xml-rpc.h:347 */
#ifndef SOAP_TYPE_fault
#define SOAP_TYPE_fault (198)
/* complex XML schema type 'fault': */
struct fault {
        /** Required element 'value' of XML schema type 'value' */
        struct value value;
};
#endif

/* xml-rpc.h:502 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (256)
/* SOAP_ENV__Header: */
struct SOAP_ENV__Header {
#ifdef WITH_NOEMPTYSTRUCT
	char dummy;	/* empty struct is a GNU extension */
#endif
};
#endif
#endif

/* xml-rpc.h:502 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (257)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_ENV__Code {
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
};
#endif
#endif

/* xml-rpc.h:502 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (259)
/* SOAP_ENV__Detail: */
struct SOAP_ENV__Detail {
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
};
#endif
#endif

/* xml-rpc.h:502 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (260)
/* SOAP_ENV__Reason: */
struct SOAP_ENV__Reason {
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
};
#endif
#endif

/* xml-rpc.h:502 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (261)
/* SOAP_ENV__Fault: */
struct SOAP_ENV__Fault {
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* xml-rpc.h:86 */
#ifndef SOAP_TYPE__boolean
#define SOAP_TYPE__boolean (20)
typedef char _boolean;
#endif

/* xml-rpc.h:89 */
#ifndef SOAP_TYPE__double
#define SOAP_TYPE__double (22)
typedef double _double;
#endif

/* xml-rpc.h:92 */
#ifndef SOAP_TYPE__i4
#define SOAP_TYPE__i4 (23)
typedef int _i4;
#endif

/* xml-rpc.h:95 */
#ifndef SOAP_TYPE__int
#define SOAP_TYPE__int (25)
typedef LONG64 _int;
#endif

/* xml-rpc.h:98 */
#ifndef SOAP_TYPE__string
#define SOAP_TYPE__string (26)
typedef char *_string;
#endif

/* xml-rpc.h:101 */
#ifndef SOAP_TYPE__dateTime_DOTiso8601
#define SOAP_TYPE__dateTime_DOTiso8601 (27)
typedef char *_dateTime_DOTiso8601;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* _boolean has binding name '_boolean' for type '' */
#ifndef SOAP_TYPE__boolean
#define SOAP_TYPE__boolean (20)
#endif

/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* _i4 has binding name '_i4' for type '' */
#ifndef SOAP_TYPE__i4
#define SOAP_TYPE__i4 (23)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* _int has binding name '_int' for type '' */
#ifndef SOAP_TYPE__int
#define SOAP_TYPE__int (25)
#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (24)
#endif

/* _double has binding name '_double' for type '' */
#ifndef SOAP_TYPE__double
#define SOAP_TYPE__double (22)
#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (21)
#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (42)
#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (41)
#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_ULONG64
#define SOAP_TYPE_ULONG64 (115)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (261)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (260)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (259)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (257)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (256)
#endif

/* struct methodCall has binding name 'methodCall' for type 'methodCall' */
#ifndef SOAP_TYPE_methodCall
#define SOAP_TYPE_methodCall (200)
#endif

/* struct fault has binding name 'fault' for type 'fault' */
#ifndef SOAP_TYPE_fault
#define SOAP_TYPE_fault (198)
#endif

/* struct methodResponse has binding name 'methodResponse' for type 'methodResponse' */
#ifndef SOAP_TYPE_methodResponse
#define SOAP_TYPE_methodResponse (187)
#endif

/* struct param has binding name 'param' for type 'param' */
#ifndef SOAP_TYPE_param
#define SOAP_TYPE_param (185)
#endif

/* struct params has binding name 'params' for type 'params' */
#ifndef SOAP_TYPE_params
#define SOAP_TYPE_params (175)
#endif

/* struct _array has binding name '_array' for type '' */
#ifndef SOAP_TYPE__array
#define SOAP_TYPE__array (70)
#endif

/* struct data has binding name 'data' for type 'data' */
#ifndef SOAP_TYPE_data
#define SOAP_TYPE_data (69)
#endif

/* struct member has binding name 'member' for type 'member' */
#ifndef SOAP_TYPE_member
#define SOAP_TYPE_member (67)
#endif

/* struct _struct has binding name '_struct' for type '' */
#ifndef SOAP_TYPE__struct
#define SOAP_TYPE__struct (47)
#endif

/* struct _base64 has binding name '_base64' for type '' */
#ifndef SOAP_TYPE__base64
#define SOAP_TYPE__base64 (28)
#endif

/* struct value has binding name 'value' for type 'value' */
#ifndef SOAP_TYPE_value
#define SOAP_TYPE_value (7)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (263)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (262)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (258)
#endif

/* struct _base64 * has binding name 'PointerTo_base64' for type '' */
#ifndef SOAP_TYPE_PointerTo_base64
#define SOAP_TYPE_PointerTo_base64 (227)
#endif

/* double * has binding name 'PointerTo_double' for type '' */
#ifndef SOAP_TYPE_PointerTo_double
#define SOAP_TYPE_PointerTo_double (221)
#endif

/* LONG64 * has binding name 'PointerTo_int' for type '' */
#ifndef SOAP_TYPE_PointerTo_int
#define SOAP_TYPE_PointerTo_int (219)
#endif

/* char * has binding name 'PointerTo_boolean' for type '' */
#ifndef SOAP_TYPE_PointerTo_boolean
#define SOAP_TYPE_PointerTo_boolean (217)
#endif

/* struct methodResponse * has binding name 'PointerTomethodResponse' for type 'methodResponse' */
#ifndef SOAP_TYPE_PointerTomethodResponse
#define SOAP_TYPE_PointerTomethodResponse (201)
#endif

/* struct fault * has binding name 'PointerTofault' for type 'fault' */
#ifndef SOAP_TYPE_PointerTofault
#define SOAP_TYPE_PointerTofault (199)
#endif

/* struct params * has binding name 'PointerToparams' for type 'params' */
#ifndef SOAP_TYPE_PointerToparams
#define SOAP_TYPE_PointerToparams (197)
#endif

/* struct param * has binding name 'PointerToparam' for type 'param' */
#ifndef SOAP_TYPE_PointerToparam
#define SOAP_TYPE_PointerToparam (186)
#endif

/* wchar_t * has binding name 'wstring' for type 'xsd:string' */
#ifndef SOAP_TYPE_wstring
#define SOAP_TYPE_wstring (112)
#endif

/* struct member * has binding name 'PointerTomember' for type 'member' */
#ifndef SOAP_TYPE_PointerTomember
#define SOAP_TYPE_PointerTomember (68)
#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (43)
#endif

/* _dateTime_DOTiso8601 has binding name '_dateTime_DOTiso8601' for type '' */
#ifndef SOAP_TYPE__dateTime_DOTiso8601
#define SOAP_TYPE__dateTime_DOTiso8601 (27)
#endif

/* _string has binding name '_string' for type '' */
#ifndef SOAP_TYPE__string
#define SOAP_TYPE__string (26)
#endif

/* struct value * has binding name 'PointerTovalue' for type 'value' */
#ifndef SOAP_TYPE_PointerTovalue
#define SOAP_TYPE_PointerTovalue (8)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/* xml-rpc.h:41 */
extern struct value *new_value(struct soap *soap);

/* xml-rpc.h:44 */
extern struct value *init_value(struct soap *soap, struct value *v);

/* xml-rpc.h:399 */
extern char *bool_of(struct value *v);

/* xml-rpc.h:402 */
extern LONG64 *int_of(struct value *v);

/* xml-rpc.h:405 */
extern double *double_of(struct value *v);

/* xml-rpc.h:408 */
extern const char **string_of(struct value *v);

/* xml-rpc.h:411 */
extern const char **dateTime_of(struct value *v);

/* xml-rpc.h:414 */
extern struct _base64 *base64_of(struct value *v);

/* xml-rpc.h:417 */
extern struct value *value_at(struct value *v, const char *s);

/* xml-rpc.h:420 */
extern struct value *value_atw(struct value *v, const wchar_t *s);

/* xml-rpc.h:423 */
extern int nth_at(const struct value *v, const char *s);

/* xml-rpc.h:426 */
extern int nth_atw(const struct value *v, const wchar_t *s);

/* xml-rpc.h:429 */
extern int nth_nth(const struct value *v, int n);

/* xml-rpc.h:432 */
extern struct member *nth_member(struct value *v, int n);

/* xml-rpc.h:435 */
extern struct value *nth_value(struct value *v, int n);

/* xml-rpc.h:438 */
extern char is_null(const struct value *v);

/* xml-rpc.h:441 */
extern char is_int(const struct value *v);

/* xml-rpc.h:444 */
extern char is_double(const struct value *v);

/* xml-rpc.h:447 */
extern char is_number(const struct value *v);

/* xml-rpc.h:450 */
extern char is_string(const struct value *v);

/* xml-rpc.h:453 */
extern char is_bool(const struct value *v);

/* xml-rpc.h:456 */
extern char is_true(const struct value *v);

/* xml-rpc.h:459 */
extern char is_false(const struct value *v);

/* xml-rpc.h:462 */
extern char is_array(const struct value *v);

/* xml-rpc.h:465 */
extern char is_struct(const struct value *v);

/* xml-rpc.h:468 */
extern char is_dateTime(const struct value *v);

/* xml-rpc.h:471 */
extern char is_base64(const struct value *v);

/* xml-rpc.h:474 */
extern void set_struct(struct value *v);

/* xml-rpc.h:477 */
extern void set_size(struct value *v, int n);

/* xml-rpc.h:480 */
extern int has_size(const struct value *v);

/* xml-rpc.h:483 */
extern int is_empty(const struct value *v);

/* xml-rpc.h:492 */
extern struct params *new_params(struct soap *soap);

/* xml-rpc.h:495 */
extern struct params *init_params(struct soap *soap, struct params *p);

/* xml-rpc.h:498 */
extern struct value *nth_param(struct params *p, int n);

/* xml-rpc.h:501 */
extern int call_method(struct soap *soap, const char *endpoint, const char *methodName, struct params *p, struct methodResponse *r);

#ifdef __cplusplus
}
#endif

#endif

/* End of soapStub.h */
